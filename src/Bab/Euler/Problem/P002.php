<?php

namespace Bab\Euler\Problem;

use Symfony\Component\Console\Output\OutputInterface;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 */
class P002 implements ProblemInterface
{
    /**
     * {@inheritDoc}
     */
    public function resolve(OutputInterface $output)
    {
        $fibonacci = [1, 2];

        while (true) {
            $last = end($fibonacci);
            $previous = prev($fibonacci);
            $sum = $last + $previous;
            if (4000000 <= $sum) {
                break;
            }
            $fibonacci[] = $sum;
        }

        $output->isVerbose() && $output->writeln(sprintf('Found %d numbers', count($fibonacci)));

        $sum = 0;
        foreach ($fibonacci as $value) {
            if (0 === $value % 2) {
                $sum += $value;
            }
        }

        return $sum;
    }
}
